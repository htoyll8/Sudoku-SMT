#!/usr/bin/env python3

from z3 import *

"""
coordinates:
------------------------------
00 01 02 | 03 04 05 | 06 07 08
10 11 12 | 13 14 15 | 16 17 18
20 21 22 | 23 24 25 | 26 27 28
------------------------------
30 31 32 | 33 34 35 | 36 37 38
40 41 42 | 43 44 45 | 46 47 48
50 51 52 | 53 54 55 | 56 57 58
------------------------------
60 61 62 | 63 64 65 | 66 67 68
70 71 72 | 73 74 75 | 76 77 78
80 81 82 | 83 84 85 | 86 87 88
------------------------------
"""

ROW_SIZE, COL_SIZE = (9, 9)

def solve_sudoku(sudoku):
    s = Solver()

    X = [ [ Int("x_%s_%s" % (i, j)) for j in range(COL_SIZE) ] for i in range(ROW_SIZE) ]

    # Declare values.
    for i in range(ROW_SIZE): s.add([sudoku[i][j] == 0 or X[i][j] == sudoku[i][j] for j in range(COL_SIZE)])

    # Each cell contains a value in {1, ..., 9}.
    for i in range(ROW_SIZE): s.add(And([ And(1 <= X[i][j], X[i][j] <= 9) for j in range(COL_SIZE) ]))

    # Each row contains distinct values.
    for i in range(ROW_SIZE): s.add(Distinct(X[i]))

    # Each column contains distinct values.
    for i in range(ROW_SIZE): s.add(And([Distinct([ X[i][j] ]) for j in range(COL_SIZE)]))

    # Each 3x3 sub-grid contains distinct digits.
    s.add(And([Distinct([ X[3*r + i][3*c + j]
                           for i in range(3) for j in range(3) ])
                           for r in range(3) for c in range(3) ]))

    if s.check() == sat:
        m = s.model()
        solution = [ [ m.evaluate(X[i][j]) for j in range(9) ] for i in range(9) ]
        print_matrix(solution)
    else:
        print("Unsatisfiable!")


if __name__ == '__main__':
    # Sudoku problem generated by websudoku.com
    ex1 = [[0, 2, 1, 0, 0, 9, 0, 6, 0],
            [6, 8, 0, 4, 0, 7, 0, 9, 0],
            [0, 0, 0, 0, 8, 0, 7, 5, 0],
            [0, 9, 0, 0, 0, 0, 8, 0, 5],
            [0, 0, 8, 0, 0, 0, 6, 0, 0],
            [3, 0, 4, 0, 0, 0, 0, 2, 0],
            [0, 7, 3, 0, 4, 0, 0, 0, 0],
            [0, 4, 0, 7, 0, 6, 0, 8, 9],
            [0, 5, 0, 3, 0, 0, 2, 4, 0]]

    ex2 = [[9, 2, 0, 0, 0, 0, 5, 8, 4],
           [0, 0, 0, 5, 0, 0, 0, 0, 3],
           [0, 8, 3, 0, 9, 2, 0, 0, 0],
           [2, 6, 0, 8, 5, 4, 0, 0, 1],
           [0, 0, 5, 3, 6, 1, 0, 9, 0],
           [1, 0, 0, 0, 0, 9, 0, 0, 0],
           [8, 5, 0, 2, 0, 3, 0, 1, 0],
           [4, 1, 2, 9, 8, 0, 0, 3, 0],
           [3, 9, 0, 0, 0, 6, 8, 0, 0]]

    ex3 = [[0, 0, 0, 7, 0, 0, 0, 9, 1],
           [0, 3, 1, 0, 0, 8, 0, 0, 0],
           [0, 0, 0, 0, 1, 6, 3, 0, 0],
           [0, 9, 0, 0, 0, 0, 0, 8, 4],
           [0, 0, 0, 8, 0, 5, 0, 0, 0],
           [6, 4, 0, 0, 0, 0, 0, 7, 0],
           [0, 0, 6, 5, 8, 0, 0, 0, 0],
           [0, 0, 0, 1, 0, 0, 7, 3, 0],
           [2, 8, 0, 0, 0, 9, 0, 0, 0]]

    solve_sudoku(ex1)
    solve_sudoku(ex2)
    solve_sudoku(ex3)

