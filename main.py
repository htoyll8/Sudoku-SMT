#!/usr/bin/env python3

from z3 import *

"""
coordinates:
------------------------------
00 01 02 | 03 04 05 | 06 07 08
10 11 12 | 13 14 15 | 16 17 18
20 21 22 | 23 24 25 | 26 27 28
------------------------------
30 31 32 | 33 34 35 | 36 37 38
40 41 42 | 43 44 45 | 46 47 48
50 51 52 | 53 54 55 | 56 57 58
------------------------------
60 61 62 | 63 64 65 | 66 67 68
70 71 72 | 73 74 75 | 76 77 78
80 81 82 | 83 84 85 | 86 87 88
------------------------------
"""

# sudoku is a 9-tuple of 9-tuples of digits (0-9); 0 means empty
def solve_sudoku(sudoku):
    # 9x9 matrix of Int variables X[i][j]
    X = [ [ Int("x_%s_%s" % (i, j)) for j in range(9) ]
          for i in range(9) ]

    s = Solver()
    instance = [ sudoku[i][j] == 0 or X[i][j] == sudoku[i][j]
                 for i in range(9) for j in range(9) ]
    s.add(instance)

    # each cell contains a value in {1, ..., 9}
    s.add(And([ And(1 <= X[i][j], X[i][j] <= 9) for i in range(9) for j in range(9) ]))

    # each row contains a digit at most once
    s.add(And([ Distinct(X[i]) for i in range(9) ]))

    # each column contains every digit at most once
    s.add(And([ Distinct([ X[i][j] for i in range(9) ]) for j in range(9) ]))

    # each 3x3 square contains a digit at most once
    s.add(And([ Distinct([ X[3*k + i][3*l + j]
                           for i in range(3) for j in range(3) ])
                for k in range(3) for l in range(3) ]))

    if s.check() == sat:
        m = s.model() # print solution based on model
    solution = [ [ m.evaluate(X[i][j]) for j in range(9) ]
                 for i in range(9) ]
    print_matrix(solution)


if __name__ == '__main__':
    # Sudoku problem generated by websudoku.com
    easy = [[0, 2, 1, 0, 0, 9, 0, 6, 0],
            [6, 8, 0, 4, 0, 7, 0, 9, 0],
            [0, 0, 0, 0, 8, 0, 7, 5, 0],
            [0, 9, 0, 0, 0, 0, 8, 0, 5],
            [0, 0, 8, 0, 0, 0, 6, 0, 0],
            [3, 0, 4, 0, 0, 0, 0, 2, 0],
            [0, 7, 3, 0, 4, 0, 0, 0, 0],
            [0, 4, 0, 7, 0, 6, 0, 8, 9],
            [0, 5, 0, 3, 0, 0, 2, 4, 0]]

    grid = [[3, 0, 6, 5, 0, 8, 4, 0, 0],
            [5, 2, 0, 0, 0, 0, 0, 0, 0],
            [0, 8, 7, 0, 0, 0, 0, 3, 1],
            [0, 0, 3, 0, 1, 0, 0, 8, 0],
            [9, 0, 0, 8, 6, 3, 0, 0, 5],
            [0, 5, 0, 0, 9, 0, 6, 0, 0],
            [1, 3, 0, 0, 0, 0, 2, 5, 0],
            [0, 0, 0, 0, 0, 0, 0, 7, 4],
            [0, 0, 5, 2, 0, 6, 3, 0, 0]]

    solve_sudoku(easy)
    solve_sudoku(grid)


